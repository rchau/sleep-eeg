This is a test file
invite
chris.crisur@gmail.com
raghul.shanmuganathan06@gmail.com
yttriumox@gmail.com
kiradust@gmail.com
laucalvet89@gmail.com
rchau00@gmail.com

"""
contribution from Renaldas

Raymee can you fix this error?
ERROR line 49 : TypeError: unsupported operand type(s) for +: 'int' and 'str'

"""


from __future__ import division
import numpy as np
import matplotlib.pylab as plt
import matplotlib.mlab as m

def load_sleepdata(filename):

    data = np.load(filename)

    return data['DATA'], int(data['srate']), data['stages']


#DATA, srate, stages = np.load('S1_BSL.npz')
#DATA, srate, stages = np.load('S1_REC.npz')

#DATA, srate, stages = np.load('S2_BSL.npz')
#DATA, srate, stages = np.load('S2_REC.npz')

#DATA, srate, stages = np.load('S3_BSL.npz')
#DATA, srate, stages = np.load('S3_REC.npz')

#DATA, srate, stages = np.load('S4_BSL.npz')
DATA, srate, stages = load_sleepdata('S4_REC.npz')


def bin_eeg(eeg, srate):

    bin_size_sec = 30

    bin_size_samp = bin_size_sec*srate




    t = 0

    bins = []

    while t + bin_size_samp < len(eeg):

        bins.append(eeg[range(t,t+bin_size_samp)])

        t = t + bin_size_samp
    return bins




def classify_eeg(binned_eeg, srate):

    classified = np.zeros(len(binned_eeg))

    for i in range(len(binned_eeg)):

       classified[i] = classify_epoch(binned_eeg[i],srate)

    return classified


# main loop is here
for eeg_per_person in DATA:
    binned_eeg = bin_eeg(eeg_per_person, srate)
    stages = classify_eeg(binned_eeg, srate) # here I use slightly modified classify_eeg from ProbletSet4
    stages = np.array(stages) # convert to numpy array, useful for further operations
    for stage in range(1,4): # for stages from 1 to 4
        filter_bins_at_particular_stage = stages[np.where(stages == stage)] # filter out particular stage

        amplitudes = []
        frequencies = []

        for eeg_bin in filter_bins_at_particular_stage:

            spectrum = m.psd(eeg_bin, 256, srate)

            amplitudes = np.concatenate([amplitudes, spectrum[0]])

            frequencies = np.concatenate([frequencies, spectrum[1]])




        max_amplitude_index = np.argmax(amplitudes)

        max_amplitude = amplitudes[max_amplitude_index]  # that's what you're looking for

        frequency_at_max_amplitude = frequencies[max_amplitude_index]

        print (stage)
        print (max_amplitude)
        print (frequency_at_max_amplitude)
        
        
# Code I prepared for the diagrams, unless Raghul is successful with the second version of diagrams

from __future__ import division
import numpy as np
import matplotlib.pylab as plt
import matplotlib.mlab as m


# Frequency ###########################################
N = 4
pat1bsl = (20, 35, 30, 35) # replace with data set maximum Frequencies of NREM 2 sleep

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, pat1bsl, width, color='#66FF66') 

pat2bsl = (30, 45, 40, 45) # replace with data set maximum Frequencies of NREM 2 sleep

rects2 = ax.bar(ind+width, pat2bsl, width, color='#FFFF1A') 

# add some text for labels, title and axes ticks
ax.set_ylabel('Frequency (Hz)')
ax.set_title('Maximum Frequency during NREM2 sleep')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('Patient 1', 'Patient 2', 'Patient 3', 'Patient 4') )
ax.set_ylim(0,50)
ax.legend( (rects1[0], rects2[0]), ('Patient Baseline', 'Patient Sleep Deprived') )


# Amplitude ##########################################
N = 4
pat1bsl = (20, 35, 30, 35) # replace with data set maximum Amplitudes of NREM 2 sleep

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, pat1bsl, width, color='#FF9933') 

pat2bsl = (30, 45, 40, 45) # replace with data set maximum Amplitudes of NREM 2 sleep

rects2 = ax.bar(ind+width, pat2bsl, width, color='#3399FF') 

# add some text for labels, title and axes ticks
ax.set_ylabel('Amplitude (uV)')
ax.set_title('Maximum Amplitude during NREM2 sleep')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('Patient 1', 'Patient 2', 'Patient 3', 'Patient 4') )
ax.set_ylim(0,50)
ax.legend( (rects1[0], rects2[0]), ('Patient Baseline', 'Patient Sleep Deprived') )


# NREM 2 sleep duration ################################
N = 4
pat1bsl = (20, 35, 30, 35) # replace with data set maximum Sleep Duration of NREM 2 sleep


ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, pat1bsl, width, color='#B00000')

pat2bsl = (30, 45, 40, 45) # replace with data set maximum Sleep Duration of NREM 2 sleep

rects2 = ax.bar(ind+width, pat2bsl, width, color='#663333') 

# add some text for labels, title and axes ticks
ax.set_ylabel('NREM 2 Sleep Duration (min)')
ax.set_title('NREM 2 Sleep Duration')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('Patient 1', 'Patient 2', 'Patient 3', 'Patient 4') )
ax.set_ylim(0,50)
ax.legend( (rects1[0], rects2[0]), ('Patient Baseline', 'Patient Sleep Deprived') )
